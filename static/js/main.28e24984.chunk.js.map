{"version":3,"sources":["assets/upload.png","assets/loading2.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","imgOnCanvas","detectImg","document","querySelector","canvas","onload","width","clientWidth","height","clientHeight","getContext","drawImage","setState","imageWidth","imageHeight","handleImageChange","e","reader","FileReader","file","target","files","type","indexOf","uploadImg","imagePreviewUrl","readAsDataURL","onloadend","result","state","loading","this","loadModel","MODEL_URL","faceapi","Swal","fire","icon","title","text","heightAuto","input","getElementById","withFaceLandmarks","withFaceDescriptors","fullFaceDescriptions","length","drawDetections","drawFaceLandmarks","drawFaceExpressions","className","style","src","require","alt","display","id","onClick","upload","accept","onChange","detectFace","alignItems","justifyContent","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28e24984.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upload.2677b93a.png\";","module.exports = __webpack_public_path__ + \"static/media/loading2.1e6d9f0d.gif\";","import React from 'react';\nimport * as faceapi from 'face-api.js';\nimport Swal from 'sweetalert2';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {uploadImg:false, imagePreviewUrl:'',imgOnCanvas:false, loading:false , imageWidth:'',imageHeight:''};\n  }\n\n  componentDidMount () {\n    this.loadModel();\n    //this.loadImg();\n  }\n\n  componentDidUpdate () {\n    //console.log(\"update123\");\n  }\n\n  //load faceAPI所需要的model\n  async loadModel() {\n    const MODEL_URL = '/models';\n    await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\n    await faceapi.loadFaceLandmarkModel(MODEL_URL);\n    await faceapi.loadFaceRecognitionModel(MODEL_URL);\n  }\n\n  //偵測人臉\n  async detectFace () {\n    const {uploadImg, imageWidth, imageHeight} = this.state;\n    if(!uploadImg){\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'please upload your image first,fuck u!',\n        heightAuto: false\n      })\n    }else{\n      this.setState({loading: true});\n      const input = document.getElementById('detectImg')\n      const canvas = document.querySelector('#imgCanvas');\n      let fullFaceDescriptions = await faceapi.detectAllFaces(input).withFaceLandmarks().withFaceDescriptors();\n      fullFaceDescriptions = faceapi.resizeResults(fullFaceDescriptions,{ width: imageWidth, height: imageHeight});\n      this.setState({loading: false});\n      if(fullFaceDescriptions.length === 0){\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'detect no faceQQ',\n          heightAuto: false\n        })\n      }\n      faceapi.draw.drawDetections(canvas, fullFaceDescriptions);\n      faceapi.draw.drawFaceLandmarks(canvas, fullFaceDescriptions);\n      faceapi.draw.drawFaceExpressions(canvas, fullFaceDescriptions);\n    }\n  }\n\n\n  //將圖片轉到canvas上\n  imgOnCanvas = () => {\n    const detectImg = document.querySelector('#detectImg');\n    const canvas = document.querySelector('#imgCanvas');\n    detectImg.onload = () =>{\n      canvas.width = detectImg.clientWidth;\n      canvas.height = detectImg.clientHeight;\n      canvas.getContext('2d').drawImage(detectImg, 0, 0, detectImg.clientWidth, detectImg.clientHeight);\n      this.setState({imgOnCanvas: true,imageWidth:detectImg.clientWidth,imageHeight:detectImg.clientHeight});\n    }\n  }\n\n  //上傳圖片\n  handleImageChange = (e) => {\n    let reader = new FileReader();\n    let file = e.target.files[0];\n    if ((file.type).indexOf(\"image/\") === -1){\n      this.setState({uploadImg: false, imagePreviewUrl: ''});\n    }else {\n      reader.readAsDataURL(file);\n      reader.onloadend = () => {\n        this.setState({uploadImg: true, imagePreviewUrl: reader.result, imgOnCanvas: false});\n        this.imgOnCanvas();\n      }\n    }\n  }\n\n  render() {\n    const {uploadImg, imagePreviewUrl, imgOnCanvas, loading} = this.state;\n  return (\n    <div className=\"App\">\n      <div className=\"topBlock\">\n          <div className=\"topText\">faceAPI demo</div>\n      </div>\n      <div className=\"cotentBlock\">\n        <div className=\"uploadBlock\">\n          {!uploadImg &&\n            <div className=\"uploadIcon\" >\n              <img style={{height:'85px'}} src={require('./assets/upload.png')} alt=\"\"/>\n              <span>please upload your image....</span>\n            </div>}\n            {uploadImg && <canvas style={{display:!imgOnCanvas? 'none' : 'inline'}} id=\"imgCanvas\"></canvas>}\n            <img id=\"detectImg\" className=\"detectImg\" \n              style={{display:imgOnCanvas? 'none' : 'inline'}} src={imagePreviewUrl} alt=\"\"/>\n        </div>\n        <div className=\"upload-btn-wrapper\">\n          <button className=\"button\" onClick = {() => this.upload()}>\n            <span>upload image</span>\n          </button>\n          <input type=\"file\" accept=\"image/*\" onChange={this.handleImageChange}/>\n        </div>\n        <button className=\"button\" onClick = {() => this.detectFace()}>\n          {loading === false ? <span>detect face</span>:\n            <div style={{display:'flex', alignItems:'center', justifyContent:'center'}}>\n              <img style={{height:'24px'}} src={require('./assets/loading2.gif')} alt=\"\"/>\n              <span>&nbsp;&nbsp;loading...</span>\n            </div>}\n       </button>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}